# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from hetu.cosmos.hetu.checkpointing.v1 import query_pb2 as hetu_dot_checkpointing_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RawCheckpointList = channel.unary_unary(
                '/hetu.checkpointing.v1.Query/RawCheckpointList',
                request_serializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointListRequest.SerializeToString,
                response_deserializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointListResponse.FromString,
                _registered_method=True)
        self.RawCheckpoint = channel.unary_unary(
                '/hetu.checkpointing.v1.Query/RawCheckpoint',
                request_serializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointRequest.SerializeToString,
                response_deserializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointResponse.FromString,
                _registered_method=True)
        self.BlsPublicKeyList = channel.unary_unary(
                '/hetu.checkpointing.v1.Query/BlsPublicKeyList',
                request_serializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryBlsPublicKeyListRequest.SerializeToString,
                response_deserializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryBlsPublicKeyListResponse.FromString,
                _registered_method=True)
        self.EpochStatus = channel.unary_unary(
                '/hetu.checkpointing.v1.Query/EpochStatus',
                request_serializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryEpochStatusRequest.SerializeToString,
                response_deserializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryEpochStatusResponse.FromString,
                _registered_method=True)


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def RawCheckpointList(self, request, context):
        """RawCheckpointList queries all checkpoints that match the given status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RawCheckpoint(self, request, context):
        """RawCheckpoint queries a checkpoints at a given epoch number.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlsPublicKeyList(self, request, context):
        """BlsPublicKeyList queries a list of bls public keys of the validators at a
        given epoch number.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EpochStatus(self, request, context):
        """EpochStatus queries the status of the checkpoint at a given epoch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RawCheckpointList': grpc.unary_unary_rpc_method_handler(
                    servicer.RawCheckpointList,
                    request_deserializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointListRequest.FromString,
                    response_serializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointListResponse.SerializeToString,
            ),
            'RawCheckpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.RawCheckpoint,
                    request_deserializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointRequest.FromString,
                    response_serializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointResponse.SerializeToString,
            ),
            'BlsPublicKeyList': grpc.unary_unary_rpc_method_handler(
                    servicer.BlsPublicKeyList,
                    request_deserializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryBlsPublicKeyListRequest.FromString,
                    response_serializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryBlsPublicKeyListResponse.SerializeToString,
            ),
            'EpochStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.EpochStatus,
                    request_deserializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryEpochStatusRequest.FromString,
                    response_serializer=hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryEpochStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hetu.checkpointing.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hetu.checkpointing.v1.Query', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def RawCheckpointList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hetu.checkpointing.v1.Query/RawCheckpointList',
            hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointListRequest.SerializeToString,
            hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RawCheckpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hetu.checkpointing.v1.Query/RawCheckpoint',
            hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointRequest.SerializeToString,
            hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryRawCheckpointResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BlsPublicKeyList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hetu.checkpointing.v1.Query/BlsPublicKeyList',
            hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryBlsPublicKeyListRequest.SerializeToString,
            hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryBlsPublicKeyListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EpochStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hetu.checkpointing.v1.Query/EpochStatus',
            hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryEpochStatusRequest.SerializeToString,
            hetu_dot_checkpointing_dot_v1_dot_query__pb2.QueryEpochStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
